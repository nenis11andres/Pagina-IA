name: Destruir Infraestructura con Terraform

on:
  workflow_dispatch:

jobs:
  destruir:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      BUCKET_NAME: aop-pagina-ia
      STATE_KEY: terraform/terraform.tfstate
      LOCK_ID: aop-pagina-ia/terraform/terraform.tfstate
      DYNAMODB_TABLE: terraform-lock-table

    steps:
      - name: Descargar repositorio
        uses: actions/checkout@v3

      - name: Configurar credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: ðŸ§¹ Eliminar objetos del bucket
        run: |
          echo "ðŸ§¼ Borrando objetos actuales del bucket..."
          aws s3 rm s3://$BUCKET_NAME --recursive || true

      - name: ðŸ”¥ Borrar versiones y delete markers
        run: |
          echo "ðŸ§¼ Borrando versiones y delete markers del bucket $BUCKET_NAME..."
          versions=$(aws s3api list-object-versions --bucket $BUCKET_NAME --query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}' --output=json)
          delete_markers=$(aws s3api list-object-versions --bucket $BUCKET_NAME --query='{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}' --output=json)

          echo "$versions" > versions.json
          echo "$delete_markers" > delete-markers.json

          jq -s '.[0].Objects + .[1].Objects | {Objects: .}' versions.json delete-markers.json > all.json

          if [ "$(jq '.Objects | length' all.json)" -gt 0 ]; then
            aws s3api delete-objects --bucket $BUCKET_NAME --delete file://all.json
          else
            echo "âœ… No hay versiones o delete markers que eliminar"
          fi

      - name: Eliminar estado remoto S3
        run: |
          echo "ðŸ§¨ Eliminando archivo de estado remoto: $STATE_KEY"
          aws s3 rm s3://$BUCKET_NAME/${STATE_KEY} || true

      - name: Eliminar lock en DynamoDB
        run: |
          echo "ðŸ”“ Eliminando lock de DynamoDB con LockID=$LOCK_ID..."
          aws dynamodb delete-item \
            --table-name $DYNAMODB_TABLE \
            --key "{\"LockID\": {\"S\": \"${LOCK_ID}\"}}" || true

      - name: Inicializar Terraform
        working-directory: ./terraform
        run: terraform init -force-copy

      - name: Ejecutar Terraform Destroy
        working-directory: ./terraform
        run: terraform destroy -auto-approve
